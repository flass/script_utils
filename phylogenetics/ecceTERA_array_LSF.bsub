#!/bin/bash

echo "This is job $LSB_JOBNAME, job_ID $LSB_JOBID (array_task_ID $LSB_JOBINDEX) on host $HOSTNAME, running on these workers: $LSB_MCPU_HOSTS"
echo ""

# function for checking the success of every step
checkexecnoquit (){
  if [ ${?} != 0 ]; then
    echo "ERROR: $1" 1>&2
  else
    if [ ! -z "$2" ] ; then
      echo -e "$2"
    fi
  fi
}
export -f checkexecnoquit

# load potential modules
if [ ! -z "${modulefile}" ] ; then
  source ${modulefile}
fi

## verify key variable definition
# tasklist
echo "tasklist:"
if [ -z "$tasklist" ] ; then
  echo "ERROR: need to define variable tasklist ; exit now"
  exit 2
else
  ls $tasklist
  if [ $? != 0 ] ; then
    echo "ERROR: file '$tasklist' is missing ; exit now"
    exit 2
  fi
fi

nfchain=`awk "NR==${LSB_JOBINDEX}" ${tasklist}`
echo "current task"
echo $nfchain
python2.7 << EOF
with open('$nfchain', 'r') as fchain:
  chainone = fchain.readline()
  print 'ntaxa:', chainone.count('(') + 2

EOF
echo ""
echo "# # # #"
dnchain=`dirname $nfchain`
bnchain=`basename $nfchain`
nfrad=${bnchain%%-*}

# outrecdir
echo "outrecdir:"
if [ -z "$outrecdir" ] ; then
  echo "ERROR: need to define variable outrecdir ; exit now"
  exit 2
else
  ls $outrecdir -d
  if [ $? != 0 ] ; then
    echo "directory '$outrecdir' is missing ; create it now"
    mkdir -p $outrecdir
    if [ $? != 0 ] ; then
      echo "could not create directory '$outrecdir' ; exit now"
      exit 2
    fi
  fi
fi
# spetree
echo "spetree:"
if [ -z "$spetree" ] ; then
  echo "ERROR: need to define variable spetree ; exit now"
  exit 2
else
  ls $spetree
  if [ $? != 0 ] ; then
    echo "look for $spetree species tree file in $dnchain/ folder"
    ls ${dnchain}/${nfrad}*${spetree}*
    if [ $? != 0 ] ; then
      echo "ERROR: file '$spetree' is missing ; exit now"
      exit 2
    else
      echo "found it!" 
      lnfstree=(`ls ${dnchain}/${nfrad}*${spetree}*`)
      nfstree=${lnfstree[0]}
      echo "will use nfstree=${nfstree}"
    fi
  else
    nfstree=${spetree}
  fi
fi
bnstree=`basename $nfstree`

# teraalgo
echo "teraalgo:"
if [ -z "$teraalgo" ] ; then
  echo -n "Default: "
  teraalgo='amalgamate'
fi
echo "will use $teraalgo algorithm for reconciliation estimation"

# relburninfrac
echo "relburninfrac:"
if [ -z "$relburninfrac" ] ; then
  echo -n "Default: "
  relburninfrac=0.25
fi
echo "will discard $relburninfrac fraction of the tree chain as burn-in"

# alebin (facultative location for ALE executables; default to those found in $PATH, then the Docker container)
if [ ! -z "$terabin" ] ; then
  if [ ! -z "$(ls -d "$terabin" 2> /dev/null)" ] ; then
    terabin="${terabin%*/}/"
  fi
fi

# alebin (facultative location for ALE executables; default to those found in $PATH, then the Docker container)
if [ ! -z "$alebin" ] ; then
  if [ ! -z "$(ls -d "$alebin" 2> /dev/null)" ] ; then
    alebin="${alebin%*/}/"
  fi
else
  if [ -z "$(command -v ALEobserve)" ] ; then
    # no ALE program available in the command line environment (i.e. listed in $PATH directories)
    # define alebin prefix as the Docker container
    alebin="docker run -v $PWD:$PWD -w $PWD boussau/alesuite "
    # when using the Docker cntainer with local mounting, files will need to be available locally
    echo "using a Docker container withlocal mount, must set worklocal='true'"
    worklocal='yes'
  fi
fi
# watchmem
echo "# watchmem:"
if [ -z "$watchmem" ] ; then
  teraexe="${terabin}ecceTERA"
else
  if [[ "$watchmem" == "y" || "$watchmem" == "yes" || "$watchmem" == "true" ]] ; then
    watchmem="yes"
    memusg="/apps/memusage/memusage"
  else
    memusg="$watchmem"
  fi
  teraexe="${memusg} ${terabin}ecceTERA"
  echo "will watch memory usage with '${memusg}'"
fi
# worklocal
# worklocal='yes' indicates that there will be a specific machine where the 'compute work'
# is to be done 'locally' (e.g. if using a HPC system, a worker node) 
# that is different from the machine where the master/submission script is executed (e.g. login node),
# implying file traficking between them at the begin and end of the job.
echo "# worklocal:"
if [ -z "${worklocal}" ] ; then
  echo "(Use default)"
  worklocal="yes"
else
  if [[ "${worklocal}" == "n" || "${worklocal}" == "false" ]] ; then
    worklocal="no"
  elif [[ "${worklocal}" == "y" || "${worklocal}" == "true" ]] ; then
    worklocal="yes"
  fi
fi
echo "will work (read/write) locally: ${worklocal}"
echo ""
echo "# # # #"
echo ""


## define ecceTERA algorithm and settings

makerunopt (){
	if [ ! -z ${4} ] ; then
		op="${4}."
	else
		op="$(basename ${2}).ecceTERA."
	fi
	echo "species.file=${1} gene.file=${2} output.dir=${3} output.prefix=${op}"
}

commonopt="print.newick=1 print.reconciliations=1"

collapseopts=""
if [[ "${teraalgo:0:8}"=='collapse' ]] ; then
  # for single-gene tree input mode of ecceTERA:
  # 'collapse' nodes under a given threshold: the most parsimonious scenario will be considered 
  # among those inferred from all the possible binary topologies once unsupported nodes are collapsed
  # !!! this is an option of ecceTERA; it is related in principle to the collapsing performed by pantagruel (pipelin option -c) task 06, but is not equivalent
  # it is highly recomended NOT to combine those collpasing options.
  # ecceTERA built-in collpasing should be preferred,
  # unless the user desires to reduce the species tree dimension and/or to separate recent from encient gene flow,
  # in which case the pantagruel collpsing is to be preferred.
  # 
  # the collapsing threshold must be given through the $teraalgo variable: 
  #   collapse_k-xx means collpase mode is k (should always be 1 for downstream pipeline compatibility), with threshold xx. e.g. teraalgo='collapse_1-0.5'
  colopts=($(echo ${teraalgo} | cut -d'_' -f2 | tr '-' ' '))
  [ ! -z "${colopts[0]}" ] && colmode=${colopts[0]} || colmode=1
  [ ! -z "${colopts[1]}" ] && colthre=${colopts[1]} || colthre=0.5
  collapseopts="collapse.mode=${colmode} collapse.threshold=${colthre}"
fi



####
if [[ "${worklocal}" == "yes" ]] ; then
  # copy input files locally
  rsync -az ${nfchain} ${nfstree} ./
  ls -lh ${bnchain} ${bnstree}
  if [ ${?} != 0 ] ; then
    echo "ERROR: could not copy input file ${bnchain} or ${bnstree} locally; exit now"
    exit 2
  else
    chain="./${bnchain}"
    stree="./${bnstree}"
  fi
  # will rapartiate files to output dir
  savecmd="rsync -az"
else
  chain=${nfchain}
  stree=${nfstree}
  savecmd="mv -f"
fi


## TERA reconciliation

# start timing in seconds
SECONDS=0

if [[ "${teraalgo:0:10}" == 'amalgamate' ]] ; then
  # take multiple Newick gene trees as input, i.e a gene tree chain
  # this is the recomended option.
  #
  # this is a more memory-intensive option compared to single-gene tree options below,
  # but it remains relatively cheap compared to ALE probabilistic reconciliation
  
  if [[ -e ${nfchain}.ale ]] ; then
    # will use ALEobserve to produce .ale file of amalgamated gene trees from the input gene tree chain, with defined burn-in fraction
    if [[ "$worklocal" == "yes" ]] ; then
  	  # copy input files locally
  	  rsync -az ${nfchain}.ale ./
    fi
    echo "use pre-existing ALE index file:"
    ls ${nfchain}.ale
  elif [[ -e ${outrecdir}/${bnchain}.ale ]] ; then
    if [[ "$worklocal" == "yes" ]] ; then
  	  # copy input files locally
  	  rsync -az ${outrecdir}/${bnchain}.ale ./
    else
  	  ln -s ${outrecdir}/${bnchain}.ale ${chain}.ale
    fi
    echo "use pre-existing ALE index file:"
    ls -lh ${chain}.ale
  else
    # prepare ALE index
    lenchain=`wc -l ${chain} | cut -d' ' -f1`
    burnin=`python2.7 -c "print int(${lenchain} * ${relburninfrac})"`
    echo "input tree chain is ${lenchain} long; burnin is set to ${burnin%%.*}"
    echo "# ${alebin}ALEobserve ${chain} burnin=${burnin%%.*}"
    ${alebin}ALEobserve ${chain} burnin=${burnin%%.*}
  fi
  promptdate
  
  runopt="$(makerunopt ${stree} ${chain}.ale ${outrecdir})"
  teracmd="${teraexe} ${runopt} ${commonopt} ale=1 amalgamate=1"
  
  
else
  # take single Newick gene tree as input, e.g. the gene tree chain consensus, or a ML tree
  if [ ! -s ${chain}.nwk ] ; then
    # assume the input gene tree is a Nexus-formated consensus gene tree, as obtained from Mr Bayes (with 2 tree blocks)
    # converts it from Nexus to Newick
    python2.7 ${ptgscripts}/convert_mrbayes_constree_nex2nwk.py ${chain}
  fi
  runopt="$(makerunopt ${stree} ${chain}.nwk ${outrecdir})"
  teracmd="${teraexe} ${runopt} ${commonopt} ${collapseopts}"
  
fi

echo "# ${teracmd}"
# run it in bg with a daemon checking
${teracmd} &
terapid=${!}
runmin=0
top -b -n 1 -p ${terapid} | tail -n 2 > ${nfrad}.ecceTERA.toplog
while [ ! -z $(ps -q ${terapid} -o comm=) ] ; do
  # fine grained record of what's happening, storing just the last value of time and mem
  TERAMEM=$(pmap ${terapid} | tail -n1 | awk '{print $NF}')
  echo -e "$nfrad\t$teraalgo\t$TERAMEM\tkB" > ${nfrad}.ecceTERA.memusage
  TERATIME=$SECONDS
  echo -e "$nfrad\t$teraalgo\t$TERATIME\ts" > ${nfrad}.ecceTERA.computetime
  if [ $(( $SECONDS / 60 )) -gt ${runmin} ] ; then
    # more thorough report, logged every minute
    top -b -n 1 -p ${alepid} | tail -n 1 >> ${nfrad}.ecceTERA.toplog
    # and sync of potential results (mostly the .ale.computetime, .ale.memusage and .ale.toplog files, as results are only written aththe end)
    ${savecmd} ./${nfrad}* ${outrecdir}/
    runmin=$(( $SECONDS / 60 ))
  fi
  sleep 1s
done


echo ""
echo "# # # #"

TERATIME=$SECONDS
echo -e "$nfrad\t$teraalgo\t$TERATIME\ts" > ${nfrad}.ecceTERA.computetime
echo "reconciliation estimation took" $(date -u -d @${TERATIME} +"%Hh%Mm%Ss") "total time"

echo "# ls ./${nfrad}*"
ls ./${nfrad}*

# save files
ls ./${nfrad}* > /dev/null
if [ ${?} == 0 ] ; then
  savecmd1="${savecmd} ./${nfrad}* ${outrecdir}/"
  echo "# ${savecmd1}"
  ${savecmd1}
  checkexecnoquit "unable to transfer result files from ${PWD}/ to ${outrecdir}/" "succesfuly transferred result files from ${PWD}/ to ${outrecdir}/"
else
  ls ${dnchain}/${nfrad}* > /dev/null
  if [ ${?} == 0 ] ; then
    savecmd2="$savecmd ${dnchain}/${nfrad}* $outrecdir/"
    echo "# $savecmd2"
    $savecmd2
    checkexecnoquit "unable to save result files from $dnchain to $outrecdir/" "succesfuly transferred result files from $dnchain to $outrecdir/"
  else
    echo "ERROR: unable to find the result files"
    exit 1
  fi
fi
if [[ "$worklocal" == "yes" && "$(readlink -f ${PWD})" != "$(readlink -f ${outrecdir})" ]] ; then
  # remove local copies of input/output files
  rm -f ./${nfrad}*
fi

echo ""
echo "# # # # #"
echo " # # # #"

