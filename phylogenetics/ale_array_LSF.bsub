#!/bin/bash

echo "This is job $LSB_JOBNAME, job_ID $LSB_JOBID (array_task_ID $LSB_JOBINDEX) on host $HOSTNAME, running on these workers: $LSB_MCPU_HOSTS"
echo ""

# load potential modules
if [ ! -z "${modulefile}" ] ; then
  source ${modulefile}
fi

## verify key variable definition
# tasklist
echo "tasklist:"
if [ -z "$tasklist" ] ; then
  echo "ERROR: need to define variable tasklist ; exit now"
  exit 2
else
  ls $tasklist
  if [ $? != 0 ] ; then
    echo "ERROR: file '$tasklist' is missing ; exit now"
    exit 2
  fi
fi

nfchain=`awk "NR==${LSB_JOBINDEX}" ${tasklist}`
echo "current task"
echo $nfchain
python2.7 << EOF
with open('$nfchain', 'r') as fchain:
  chainone = fchain.readline()
  print 'ntaxa:', chainone.count('(') + 2

EOF
echo ""
echo "# # # #"
dnchain=`dirname $nfchain`
bnchain=`basename $nfchain`
nfrad=${bnchain%%-*}

# outrecdir
echo "outrecdir:"
if [ -z "$outrecdir" ] ; then
  echo "ERROR: need to define variable outrecdir ; exit now"
  exit 2
else
  ls $outrecdir -d
  if [ $? != 0 ] ; then
    echo "directory '$outrecdir' is missing ; create it now"
    mkdir -p $outrecdir
    if [ $? != 0 ] ; then
      echo "could not create directory '$outrecdir' ; exit now"
      exit 2
    fi
  fi
fi
# spetree
echo "spetree:"
if [ -z "$spetree" ] ; then
  echo "ERROR: need to define variable spetree ; exit now"
  exit 2
else
  ls $spetree
  if [ $? != 0 ] ; then
    echo "look for $spetree species tree file in $dnchain/ folder"
    ls ${dnchain}/${nfrad}*${spetree}*
    if [ $? != 0 ] ; then
      echo "ERROR: file '$spetree' is missing ; exit now"
      exit 2
    else
      echo "found it!" 
      lnfstree=(`ls ${dnchain}/${nfrad}*${spetree}*`)
      nfstree=${lnfstree[0]}
      echo "will use nfstree=${nfstree}"
    fi
  else
    nfstree=${spetree}
  fi
fi
bnstree=`basename $nfstree`
# recsamplesize
echo "recsamplesize:"
if [ -z "$recsamplesize" ] ; then
  echo -n "Default: "
  recsamplesize=1000
fi
echo "will sample $recsamplesize reconciliations"
# ALEalgo
echo "ALEalgo:"
if [ -z "$ALEalgo" ] ; then
  echo -n "Default: "
  ALEalgo='ALEml_undated'
fi
echo "will use $ALEalgo algorithm for reconciliation estimation"
# relburninfrac
echo "relburninfrac:"
if [ -z "$relburninfrac" ] ; then
  echo -n "Default: "
  relburninfrac=0.25
fi
echo "will discard $relburninfrac fraction of the tree chain as burn-in"
  
# alebin (facultative location for ALE executables; default to those found in $PATH, then the Docker container)
if [ ! -z "$alebin" ] ; then
  if [ ! -z "$(ls -d "$alebin" 2> /dev/null)" ] ; then
    alebin="${alebin%*/}/"
  fi
else
  if [ -z "$(command -v ALEobserve)" ] ; then
    # no ALE program available in the command line environment (i.e. listed in $PATH directories)
    # define alebin prefix as the Docker container
    alebin="docker run -v $PWD:$PWD -w $PWD boussau/alesuite "
    # when using the Docker cntainer with local mounting, files will need to be available locally
    echo "using a Docker container withlocal mount, must set worklocal='true'"
    worklocal='yes'
  fi
fi
# watchmem
echo "# watchmem:"
if [ -z "$watchmem" ] ; then
  aleexe="${alebin}${ALEalgo}"
else
  if [[ "$watchmem" == "y" || "$watchmem" == "yes" || "$watchmem" == "true" ]] ; then
    watchmem="yes"
    memusg="/apps/memusage/memusage"
  else
    memusg="$watchmem"
  fi
  aleexe="${memusg} ${alebin}${ALEalgo}"
  echo "will watch memory usage with '${memusg}'"
fi
# worklocal
# worklocal='yes' indicates that there will be a specific machine where the 'compute work'
# is to be done 'locally' (e.g. if using a HPC system, a worker node) 
# that is different from the machine where the master/submission script is executed (e.g. login node),
# implying file traficking between them at the begin and end of the job.
echo "# worklocal:"
if [ -z "${worklocal}" ] ; then
  echo "(Use default)"
  worklocal="yes"
else
  if [[ "${worklocal}" == "n" || "${worklocal}" == "false" ]] ; then
    worklocal="no"
  elif [[ "${worklocal}" == "y" || "${worklocal}" == "true" ]] ; then
    worklocal="yes"
  fi
fi
echo "will work (read/write) locally: ${worklocal}"
echo ""
echo "# # # #"
echo ""

####
if [[ "${worklocal}" == "yes" ]] ; then
  # copy input files locally
  rsync -az ${nfchain} ${nfstree} ./
  ls -lh ${bnchain} ${bnstree}
  if [ ${?} != 0 ] ; then
    echo "ERROR: could not copy input file ${bnchain} or ${bnstree} locally; exit now"
    exit 2
  else
    chain="./${bnchain}"
    stree="./${bnstree}"
  fi
  # will rapartiate files to output dir
  savecmd="rsync -az"
else
  chain=${nfchain}
  stree=${nfstree}
  savecmd="mv -f"
fi


# resume from run with already estimated parameters,
# to perform further reconciliation sampling
# (also allows to sample from defined parameter set)
if [ "${#DTLrates[@]}" -eq 3 ] ; then
  echo -e "will perform analysis with set DTL rate parameters:\n${DTLrates[@]}"
elif [ ! -z "$resumealefromtag" ] ; then
  estparam=($(ls ${outrecdir}/${bnchain}.ale.*ml_rec${resumealefromtag}))
  if [ ! -z "${estparam}" ] ; then
    DTLrates=($(grep -A 1 "rate of" ${estparam} | grep 'ML' | awk '{print $2,$3,$4}'))
    if [ "${#DTLrates[@]}" -eq 3 ] ; then
      echo -e "will resume analysis from previously estimated DTL rate parameters:\n${DTLrates[@]} \nas found in file:\n'$estparam'"
      prevcomputetime=$(cat ${outrecdir}/${nfrad}.ale.computetime${resumealefromtag} | cut -f3)
      if [ ! -z "$prevcomputetime" ] ; then
        echo -e "will add previous computation time spent estimating parameters found in file:\n'${dnchain}/${nfrad}.ale.computetime${resumealefromtag}'\nto new record:\n'./${nfrad}.ale.computetime'"
      fi
    fi
  fi
fi
echo ""

if [[ -e ${nfchain}.ale ]] ; then
  if [[ "${worklocal}" == "yes" ]] ; then
   # copy input files locally
   rsync -az ${nfchain}.ale ./
  fi
  echo "use pre-existing ALE index file:"
  ls ${nfchain}.ale
elif [[ -e ${outrecdir}/${bnchain}.ale ]] ; then
  if [[ "$worklocal" == "yes" ]] ; then
   # copy input files locally
   rsync -az ${outrecdir}/${bnchain}.ale ./
  else
   ln -s ${outrecdir}/${bnchain}.ale ${chain}.ale
  fi
  echo "use pre-existing ALE index file:"
  ls -lh ${chain}.ale
else
  # prepare ALE index
  lenchain=$(wc -l ${chain} | cut -d' ' -f1)
  burnin=$(python2.7 -c "print int(${lenchain} * float(${relburninfrac}))")
  echo "input tree chain is ${lenchain} long; burnin is set to ${burnin%%.*}"
  echo "# ${alebin}ALEobserve ${chain} burnin=${burnin%%.*}"
  ${alebin}ALEobserve ${chain} burnin=${burnin%%.*}
fi
date

# start timing in seconds
SECONDS=0
# run ALE reconciliation 
if [ "$ALEalgo" == 'ALEml' ] ; then
  alecmd="${aleexe} ${stree} ${chain}.ale ${recsamplesize} _"
  if [ "${#DTLrates[@]}" -eq 3 ] ; then alecmd="${alecmd} ${DTLrates[@]}" ; fi
elif [ "$ALEalgo" == 'ALEml_undated' ] ; then
  alecmd="${aleexe} ${stree} ${chain}.ale sample=${recsamplesize} separators=_"
  if [ "${#DTLrates[@]}" -eq 3 ] ; then alecmd="${alecmd} delta=${DTLrates[0]} tau=${DTLrates[0]} lambda=${DTLrates[0]}" ; fi
else
  echo "ALE algorithm ${ALEalgo} not supported in this script, sorry; exit now"
  exit 2
fi
echo "# ${alecmd}"
# run it in bg with a daemon checking
${alecmd} &
alepid=${!}
top -b -n 1 -p ${alepid} | tail -n 2 > ${nfrad}.ale.toplog
while [ ! -z $(ps -q $alepid -o comm=) ] ; do
  sleep 60s
  top -b -n 1 -p ${alepid} | tail -n 1 >> ${nfrad}.ale.toplog
  if [[ "${watchmem}" == "yes" ]] ; then 
    # deprecated and nonuniversal way to follow memory use ; replace by top command above and pmap command below
    ALEMEM=$(tail -n 1 memusage.*.out | cut -f1)
    echo "$nfrad\t$ALEalgo\t$ALEMEM\tkB" > ${nfrad}.ale.memusage
  else
    ALEMEM=$(pmap ${alepid} | tail -n1 | awk '{print $NF}')
    echo "$nfrad\t$ALEalgo\t$ALEMEM\tkB" > ${nfrad}.ale.memusage
  fi
  ALETIME=${SECONDS}
  echo -e "${nfrad}\t${ALEalgo}\t${ALETIME}\ts" > ${nfrad}.ale.computetime
  ${savecmd} ./${nfrad}.ale.* ${outrecdir}/
done
echo ""
echo "# # # #"

ALETIME=${SECONDS}
if [ ! -z "${prevcomputetime}" ] ; then ALETIME=$(( ${ALETIME} + ${prevcomputetime} )) ; fi
echo -e "${nfrad}\t${ALEalgo}\t${ALETIME}\ts" > ${nfrad}.ale.computetime
echo "reconciliation estimation took" $(date -u -d @${ALETIME} +"%Hh%Mm%Ss") "total time"
if [ ! -z "${prevcomputetime}" ] ; then echo "(including ${prevcomputetime} in previous run)" ; fi
echo "# ls *${nfrad}*"
ls *${nfrad}*

# save files
ls ./*${nfrad}*.ale.* > /dev/null
if [ ${?} == 0 ] ; then
  savecmd1="$savecmd ./*${nfrad}*.ale* ${outrecdir}/"
  echo "# ${savecmd1}"
  ${savecmd1}
  if [ $? != 0 ] ; then
    echo "ERROR: unable to save result files from ${PWD}/ to ${outrecdir}/"
  fi
else
ls ${dnchain}/*${nfrad}*.ale.* > /dev/null
if [ ${?} == 0 ] ; then
  savecmd2="${savecmd} ${dnchain}/*${nfrad}*.ale.* ${outrecdir}/"
  echo "# ${savecmd2}"
  ${savecmd2}
  if [ ${?} != 0 ] ; then
    echo "ERROR: unable to save result files from ${dnchain} to ${outrecdir}/"
  fi
else
  echo "ERROR: unable to find the result files"
fi
fi
if [[ "$worklocal" == "yes" && "$(readlink -f ${PWD})" != "$(readlink -f ${outrecdir})" ]] ; then
  # remove local copies of input/output files
  rm -f ./*${nfrad}*
fi

echo ""
echo "# # # # #"
echo " # # # #"

